#!/usr/bin/python3
import sys
import sympy
import random

def pollard_rho(n):
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    def rho(x, c):
        return (x * x + c) % n

    x, y, d = 2, 2, 1
    c = random.randint(1, n - 1)

    while d == 1:
        x = rho(x, c)
        y = rho(rho(y, c), c)
        d = gcd(abs(x - y), n)

    if d == n:
        return None  # Pollard's rho failed
    else:
        return d

def factorize_rsa_number(n):
    factors = []
    while n > 1:
        factor = pollard_rho(n)
        if factor is None:
            return None  # Pollard's rho failed to factorize
        factors.append(factor)
        n //= factor

    if len(factors) == 2:
        return tuple(sorted(factors))
    else:
        return None  # RSA number not factorized into two primes

def main():
    if len(sys.argv) != 2:
        print("Usage: rsa <number>")
        sys.exit(1)

    n = int(sys.argv[1])

    factors = factorize_rsa_number(n)
    if factors:
        p, q = factors
        print(f"{n}={p}*{q}")
    else:
        print(f"Failed to factorize {n}.")

if __name__ == "__main__":
    main()
